import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.2ee92742.js";const u=JSON.parse('{"title":"数组去重","description":"","frontmatter":{},"headers":[],"relativePath":"learn/面试鸭/数组去重.md","filePath":"learn/面试鸭/数组去重.md","lastUpdated":null}'),l={name:"learn/面试鸭/数组去重.md"},o=p(`<h1 id="数组去重" tabindex="-1">数组去重 <a class="header-anchor" href="#数组去重" aria-label="Permalink to &quot;数组去重&quot;">​</a></h1><h2 id="map记录" tabindex="-1">Map记录 <a class="header-anchor" href="#map记录" aria-label="Permalink to &quot;Map记录&quot;">​</a></h2><p>首先先看代码：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mapArray</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">arr</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">newArr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">    arr.</span><span style="color:#B392F0;">reduce</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">pre</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">next</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 判断新的这一项数据是否在map对象内（pre为map对象累计值）</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">pre.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(next)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            pre.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(next)</span></span>
<span class="line"><span style="color:#E1E4E8;">            newArr.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(next)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> pre </span><span style="color:#6A737D;">// 无论有没有添加数据，都把最新的map对象返回出去</span></span>
<span class="line"><span style="color:#E1E4E8;">    }, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Map</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> newArr</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mapArray</span><span style="color:#24292E;">(</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">newArr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">    arr.</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">((</span><span style="color:#E36209;">pre</span><span style="color:#24292E;">, </span><span style="color:#E36209;">next</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 判断新的这一项数据是否在map对象内（pre为map对象累计值）</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">pre.</span><span style="color:#6F42C1;">has</span><span style="color:#24292E;">(next)) {</span></span>
<span class="line"><span style="color:#24292E;">            pre.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(next)</span></span>
<span class="line"><span style="color:#24292E;">            newArr.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(next)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> pre </span><span style="color:#6A737D;">// 无论有没有添加数据，都把最新的map对象返回出去</span></span>
<span class="line"><span style="color:#24292E;">    }, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Map</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> newArr</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>下面进行逐行解析：</p><ol><li>定义一个新的数组</li><li>通过数组的 <code>reduce</code> 遍历每一项，初始值设为 <code>Map</code>， <code>reduce</code> 方法不仅用于做累加，还能通过其累计值判断其是否存在</li><li>如果值不存在于 <code>Map</code> 对象中，则把值添加进去，并添加到数组中</li><li>返回新的累计值</li><li>循环结束后把新数组返回</li></ol><h3 id="知识点" tabindex="-1">知识点 <a class="header-anchor" href="#知识点" aria-label="Permalink to &quot;知识点&quot;">​</a></h3><ul><li><p>Map</p><p>Map 对象的 key 是唯一的，不可重复的，其 <code>set()</code> 方法可以往 Map 对象内添加值，<code>get()</code> 方法可以获取值，<code>has()</code> 方法可以判断 <code>Map</code> 对象中是否存在该 key 值。</p></li><li><p>reduce</p><p>接收两个参数，参数1为回调函数，参数2为初始值。本案例中，初始值为 <code>Map</code> 对象。回调函数也接收多个参数，参数1为累计值，在一开始时该值为初始值，即 <code>Map</code> 对象，参数2为当前循环项。</p></li></ul><h2 id="set去重" tabindex="-1">Set去重 <a class="header-anchor" href="#set去重" aria-label="Permalink to &quot;Set去重&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setArray</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">arr</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Array.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">(arr))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 或</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> [</span><span style="color:#F97583;">...new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">(arr)]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setArray</span><span style="color:#24292E;">(</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Array.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">(arr))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 或</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">(arr)]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,10),e=[o];function r(c,t,E,y,i,d){return a(),n("div",null,e)}const F=s(l,[["render",r]]);export{u as __pageData,F as default};
