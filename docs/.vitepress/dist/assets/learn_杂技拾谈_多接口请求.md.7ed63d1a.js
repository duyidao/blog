import{_ as s,o as a,c as o,S as l}from"./chunks/framework.e036d9b7.js";const i=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"learn/杂技拾谈/多接口请求.md","filePath":"learn/杂技拾谈/多接口请求.md","lastUpdated":null}'),n={name:"learn/杂技拾谈/多接口请求.md"},p=l('<h2 id="多接口请求" tabindex="-1">多接口请求 <a class="header-anchor" href="#多接口请求" aria-label="Permalink to &quot;多接口请求&quot;">​</a></h2><p>前端时常会碰到要请求多个接口的场景。一个接口设置一个函数，统一在生命周期执行的方法也可以，但是代码量大，维护麻烦。</p><p>有没有什么简便的方法呢？</p><p><code>Promise</code> 对象提供了一个 <code>all</code> 方法，可以调用多个接口，根据位置依次返回 <code>promise</code> 请求参数。返回的是一个数组，因此可以通过解构的方式获取。代码如下所示：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> result</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">all</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">接口1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">接口2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">])</span></span></code></pre></div><p>运行后可以看到有效果了。但是还有潜在的问题。</p><p>众所周知，接口是有存在错误的情况的，如果有一个接口报错，则全部的接口都不再返回。因此需要铺货错误。</p><p>可以通过 <code>map</code> 循环，每一项都通过 <code>catch</code> 方法捕获错误，代码如下所示：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> result</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">all</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">接口1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">接口2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">v</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> v</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">catch</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(e))))</span></span></code></pre></div><p>这下报错接口能够被捕获到错误，而没问题的接口能返回信息。</p>',10),e=[p];function t(c,r,D,y,A,C){return a(),o("div",null,e)}const d=s(n,[["render",t]]);export{i as __pageData,d as default};
