import{_ as s,c as i,o as a,U as n}from"./chunks/framework.pP-Hyzfo.js";const g=JSON.parse('{"title":"极速问诊","description":"","frontmatter":{},"headers":[],"relativePath":"project/myself/优医问诊/consult.md","filePath":"project/myself/优医问诊/consult.md","lastUpdated":1705848104000}'),t={name:"project/myself/优医问诊/consult.md"},e=n(`<h1 id="极速问诊" tabindex="-1">极速问诊 <a class="header-anchor" href="#极速问诊" aria-label="Permalink to &quot;极速问诊&quot;">​</a></h1><h2 id="枚举定义" tabindex="-1">枚举定义 <a class="header-anchor" href="#枚举定义" aria-label="Permalink to &quot;枚举定义&quot;">​</a></h2><p>枚举的作用是表示一组明确可选的值，和字面量类型配合联合类型类似。</p><p>枚举可以定义一组常量，使用该类型后，约定只能使用这组常量中的其中一个。</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建枚举类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Direction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Up</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Down</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Right</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用枚举类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> changeDirection</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">direction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Direction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(direction)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 调用函数时，需要应该传入：枚举 Direction 成员的任意一个</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 类似于 JS 中的对象，直接通过 点（.）语法 访问枚举的成员</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">changeDirection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Direction.Up)</span></span></code></pre></div><ul><li>通过枚举访问其成员，成员的值是什么？ <ul><li>默认从 0 开始自增的数值</li></ul></li><li>可以修改其成员的值吗？ <ul><li><code>Up = 10</code> , 后面是从 10 开始自增</li></ul></li><li>成员的值可以使用字符串吗？ <ul><li><code>Up = &#39;Up&#39;</code> 可以，但是后面的值都需要使用字符串。</li></ul></li><li>如果这组可选值语义很高，如 <code>topic | knowledge | doc | disease</code> ，使用字面量配合联合类型更简单些</li></ul><blockquote><p>注意</p><p>更推荐使用 <code>ts</code> 文件定义枚举而不是使用 <code>.d.ts</code> ，枚举的值经常需要在运行的时候使用，<code>d.ts</code> 不参与运行。</p></blockquote><h2 id="全部可选" tabindex="-1">全部可选 <a class="header-anchor" href="#全部可选" aria-label="Permalink to &quot;全部可选&quot;">​</a></h2><p>用户输入信息是一步步输入的，因此需要信息全部修改为可选状态。typescript 中 <code>Required</code> 转换为全部必须；<code>Partial</code> 转换为全部可选 两个内置的泛型类型。</p>`,9),l=[e];function p(h,k,d,o,c,r){return a(),i("div",null,l)}const y=s(t,[["render",p]]);export{g as __pageData,y as default};
