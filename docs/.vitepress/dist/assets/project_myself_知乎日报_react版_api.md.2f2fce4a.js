import{_ as s,o as a,c as o,S as n}from"./chunks/framework.e036d9b7.js";const A=JSON.parse('{"title":"请求配置","description":"","frontmatter":{},"headers":[],"relativePath":"project/myself/知乎日报/react版/api.md","filePath":"project/myself/知乎日报/react版/api.md","lastUpdated":null}'),l={name:"project/myself/知乎日报/react版/api.md"},p=n(`<h1 id="请求配置" tabindex="-1">请求配置 <a class="header-anchor" href="#请求配置" aria-label="Permalink to &quot;请求配置&quot;">​</a></h1><h2 id="axios二次封装" tabindex="-1">Axios二次封装 <a class="header-anchor" href="#axios二次封装" aria-label="Permalink to &quot;Axios二次封装&quot;">​</a></h2><p>二次封装已经是老生常谈的问题了，<code>axios</code> 二次封装无外乎从以下几个方面入手：</p><ul><li>基准路径：<code>baseUrl</code></li><li>超时时间：<code>timeout</code></li><li>请求拦截器：用于判断接口路径以设置不同的请求体、把 <code>token</code> 放到请求体上</li><li>响应拦截器：用于判断请求状态返回数据，并根据相应的状态做对应处理</li></ul><h2 id="代理" tabindex="-1">代理 <a class="header-anchor" href="#代理" aria-label="Permalink to &quot;代理&quot;">​</a></h2><p>首先需要安装依赖：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">yarn add http-proxy-middleware --save-dev</span></span></code></pre></div><p>然后在 <code>create-react-app</code> 创建的 <code>react</code> 项目想要实现代理，则需要在 <code>src</code> 文件夹下新建一个 <code>setupProxy.js</code> 文件用于代理处理。</p><p>代码如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">createProxyMiddleware</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http-proxy-middleware</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">app</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/api</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">createProxyMiddleware</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">    target</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;font-style:italic;">//后台服务器地址</span></span>
<span class="line"><span style="color:#F07178;">    changeOrigin</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    pathRewrite</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">^/api</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},}</span><span style="color:#F07178;">))</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><blockquote><p>注意</p><p>在新版本中已经默认设置代理的文件夹名为 <code>setupProxy</code> 。</p><p><img src="https://img-blog.csdnimg.cn/f8958cd1fb344e21987883dfa7824413.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA57mB5pif5Y-s5ZSk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p></blockquote><p>到这里所有配置就基本完成，在组件中调用即可。</p>`,12),e=[p];function t(c,r,i,F,y,D){return a(),o("div",null,e)}const C=s(l,[["render",t]]);export{A as __pageData,C as default};
