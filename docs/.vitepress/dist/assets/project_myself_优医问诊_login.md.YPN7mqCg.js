import{_ as s,c as i,o as a,U as n}from"./chunks/framework.pP-Hyzfo.js";const g=JSON.parse('{"title":"登录模块","description":"","frontmatter":{"0":"t","1":"i","2":"t","3":"l","4":"e","5":" ","6":"登","7":"录","8":"模","9":"块"},"headers":[],"relativePath":"project/myself/优医问诊/login.md","filePath":"project/myself/优医问诊/login.md","lastUpdated":1704113695000}'),e={name:"project/myself/优医问诊/login.md"},t=n(`<h1 id="登录模块" tabindex="-1">登录模块 <a class="header-anchor" href="#登录模块" aria-label="Permalink to &quot;登录模块&quot;">​</a></h1><h2 id="路由回退" tabindex="-1">路由回退 <a class="header-anchor" href="#路由回退" aria-label="Permalink to &quot;路由回退&quot;">​</a></h2><p>登录页面顶部导航了允许点击左侧的箭头返回上一页，此时需要判断当前路由栈是否有历史路由。如果有，返回上一个路由即可；如果没有，则直接返回到首页。</p><p>代码如下所示：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 判断历史记录中是否有回退</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (history.state?.back) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">back</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="组件类型" tabindex="-1">组件类型 <a class="header-anchor" href="#组件类型" aria-label="Permalink to &quot;组件类型&quot;">​</a></h2><p>想要实现组件也有 typescript 类型，在使用时能够给予事件、属性提示，可以给组件添加类型。</p><p>添加类型方法分为如下几步：</p><ol><li>写一个组件类型声明文件（以 <code>.d.ts</code> 为后缀），<code>declare module &#39;vue&#39;</code> 声明一个 vue 类型模块</li><li>然后 <code>interface GlobalComponents</code> 书写全局组件的类型</li><li>key组件名称支持大驼峰，value是组件类型,通过 typeof 组件实例得到</li></ol><p>代码如下所示：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyNavBar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@/components/MyNavBar.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">declare</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> module</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GlobalComponents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    MyNavBar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyNavBar</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,11),l=[t];function p(h,k,r,d,o,c){return a(),i("div",null,l)}const y=s(e,[["render",p]]);export{g as __pageData,y as default};
