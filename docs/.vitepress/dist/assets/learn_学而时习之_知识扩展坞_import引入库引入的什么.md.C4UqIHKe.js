import{_ as a,c as e,o,a2 as t}from"./chunks/framework.Bbmmfjgb.js";const k=JSON.parse('{"title":"import引入库引入的是什么","description":"","frontmatter":{},"headers":[],"relativePath":"learn/学而时习之/知识扩展坞/import引入库引入的什么.md","filePath":"learn/学而时习之/知识扩展坞/import引入库引入的什么.md","lastUpdated":1711097025000}'),i={name:"learn/学而时习之/知识扩展坞/import引入库引入的什么.md"},s=t('<h1 id="import引入库引入的是什么" tabindex="-1">import引入库引入的是什么 <a class="header-anchor" href="#import引入库引入的是什么" aria-label="Permalink to &quot;import引入库引入的是什么&quot;">​</a></h1><h2 id="package-json重要字段" tabindex="-1">package.json重要字段 <a class="header-anchor" href="#package-json重要字段" aria-label="Permalink to &quot;package.json重要字段&quot;">​</a></h2><h2 id="import引入模块机制-模块引入的是哪个文件" tabindex="-1">import引入模块机制，模块引入的是哪个文件 <a class="header-anchor" href="#import引入模块机制-模块引入的是哪个文件" aria-label="Permalink to &quot;import引入模块机制，模块引入的是哪个文件&quot;">​</a></h2><p>首先先谈谈寻找文件夹的机制。机制主要分以下两种情况：</p><ol><li>如果加了 <code>&quot;.&quot;</code> 、<code>&quot;/&quot;</code> 这样的具体路径，那么会按照路径查找</li><li>如果只写了模块名，则去 <code>node_modules</code> 中查找</li></ol><p><code>import</code> 引入整个文件夹肯定是不行的，实际上它引入的是一个文件。那么到底引入的是哪个文件呢？</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> axios </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;axios&#39;</span></span></code></pre></div><p>首先会先判断 <code>axios</code> 有没有 <code>packjson</code> 字段，且是否有对应的控制字段</p>',8),r=[s];function p(n,c,d,l,h,_){return o(),e("div",null,r)}const u=a(i,[["render",p]]);export{k as __pageData,u as default};
