import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.2ee92742.js";const F=JSON.parse('{"title":"请求配置","description":"","frontmatter":{},"headers":[],"relativePath":"project/myself/知乎日报/react版/api.md","filePath":"project/myself/知乎日报/react版/api.md","lastUpdated":null}'),l={name:"project/myself/知乎日报/react版/api.md"},e=p(`<h1 id="请求配置" tabindex="-1">请求配置 <a class="header-anchor" href="#请求配置" aria-label="Permalink to &quot;请求配置&quot;">​</a></h1><h2 id="axios二次封装" tabindex="-1">Axios二次封装 <a class="header-anchor" href="#axios二次封装" aria-label="Permalink to &quot;Axios二次封装&quot;">​</a></h2><p>二次封装已经是老生常谈的问题了，<code>axios</code> 二次封装无外乎从以下几个方面入手：</p><ul><li>基准路径：<code>baseUrl</code></li><li>超时时间：<code>timeout</code></li><li>请求拦截器：用于判断接口路径以设置不同的请求体、把 <code>token</code> 放到请求体上</li><li>响应拦截器：用于判断请求状态返回数据，并根据相应的状态做对应处理</li></ul><h2 id="代理" tabindex="-1">代理 <a class="header-anchor" href="#代理" aria-label="Permalink to &quot;代理&quot;">​</a></h2><p>首先需要安装依赖：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">yarn add http-proxy-middleware --save-dev</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">yarn add http-proxy-middleware --save-dev</span></span></code></pre></div><p>然后在 <code>create-react-app</code> 创建的 <code>react</code> 项目想要实现代理，则需要在 <code>src</code> 文件夹下新建一个 <code>setupProxy.js</code> 文件用于代理处理。</p><p>代码如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> {</span><span style="color:#79B8FF;">createProxyMiddleware</span><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;http-proxy-middleware&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">app</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  app.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/api&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">createProxyMiddleware</span><span style="color:#E1E4E8;">({ </span></span>
<span class="line"><span style="color:#E1E4E8;">    target: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#6A737D;">//后台服务器地址</span></span>
<span class="line"><span style="color:#E1E4E8;">    changeOrigin: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    pathRewrite: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;^/api&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    },}))</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> {</span><span style="color:#005CC5;">createProxyMiddleware</span><span style="color:#24292E;">} </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;http-proxy-middleware&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">app</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  app.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/api&#39;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">createProxyMiddleware</span><span style="color:#24292E;">({ </span></span>
<span class="line"><span style="color:#24292E;">    target: </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">,</span><span style="color:#6A737D;">//后台服务器地址</span></span>
<span class="line"><span style="color:#24292E;">    changeOrigin: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    pathRewrite: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;^/api&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    },}))</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><blockquote><p>注意</p><p>在新版本中已经默认设置代理的文件夹名为 <code>setupProxy</code> 。</p><p><img src="https://img-blog.csdnimg.cn/f8958cd1fb344e21987883dfa7824413.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA57mB5pif5Y-s5ZSk,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p></blockquote><p>到这里所有配置就基本完成，在组件中调用即可。</p>`,12),o=[e];function t(c,r,i,E,y,d){return a(),n("div",null,o)}const u=s(l,[["render",t]]);export{F as __pageData,u as default};
