import{_ as s,o as a,c as n,S as l}from"./chunks/framework.e036d9b7.js";const C=JSON.parse('{"title":"关于 forEach 使用 break 跳出循环","description":"","frontmatter":{},"headers":[],"relativePath":"learn/面试鸭/关于forEach使用break跳出循环.md","filePath":"learn/面试鸭/关于forEach使用break跳出循环.md","lastUpdated":null}'),o={name:"learn/面试鸭/关于forEach使用break跳出循环.md"},p=l(`<h1 id="关于-foreach-使用-break-跳出循环" tabindex="-1">关于 forEach 使用 break 跳出循环 <a class="header-anchor" href="#关于-foreach-使用-break-跳出循环" aria-label="Permalink to &quot;关于 forEach 使用 break 跳出循环&quot;">​</a></h1><h2 id="错误抛出" tabindex="-1">错误抛出 <a class="header-anchor" href="#错误抛出" aria-label="Permalink to &quot;错误抛出&quot;">​</a></h2><p>如果采用错误抛出的方法来结束循序，代码如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">item</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">item</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">id</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">throw</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Error</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">后续执行的代码</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>执行后我们发现，虽然循环停止了，但是后续的代码也不再执行了。这显然不是我们想要的效果，需要做点改进。</p><h2 id="try-catch" tabindex="-1">try...catch <a class="header-anchor" href="#try-catch" aria-label="Permalink to &quot;try...catch&quot;">​</a></h2><p>在之前，我们有用过通过 <code>try...catch...</code> 捕获抛出的异常错误，可以用在这里，到捕获到 <code>forEach</code> 抛出的错误后，<code>catch</code> 内执行后续的代码。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;font-style:italic;">item</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    	</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">item</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">id</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">throw</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Error</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">后续执行的代码</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>现在运行代码，能够正常执行，且效果是我们想要的效果。</p><h2 id="题外话" tabindex="-1">题外话 <a class="header-anchor" href="#题外话" aria-label="Permalink to &quot;题外话&quot;">​</a></h2><p>用异常控制语句来达到流程控制语句的效果，这是一种反模式，不要在工作中使用。代码要么改为for需要，要么根据实际情况，先用 <code>filter</code> 过滤一遍再处理。</p>`,11),e=[p];function t(c,r,y,F,D,i){return a(),n("div",null,e)}const A=s(o,[["render",t]]);export{C as __pageData,A as default};
