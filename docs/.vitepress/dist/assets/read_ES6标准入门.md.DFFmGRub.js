import{_ as s,c as i,o as a,U as e}from"./chunks/framework.pP-Hyzfo.js";const g=JSON.parse('{"title":"ES6标准入门 第3版(阮一峰)","description":"","frontmatter":{},"headers":[],"relativePath":"read/ES6标准入门.md","filePath":"read/ES6标准入门.md","lastUpdated":1707298458000}'),t={name:"read/ES6标准入门.md"},l=e(`<h1 id="es6标准入门-第3版-阮一峰" tabindex="-1">ES6标准入门 第3版(阮一峰) <a class="header-anchor" href="#es6标准入门-第3版-阮一峰" aria-label="Permalink to &quot;ES6标准入门 第3版(阮一峰)&quot;">​</a></h1><p>《ES6 标准入门 第3版(阮一峰)》这本书主要讲述了 ECMAScript 6（ES6）新的语法特性和功能。以下是这本书涵盖的一些主要内容：</p><ol><li><strong>let 和 const</strong>: 介绍了 <code>let</code> 和 <code>const</code> 关键字用于声明变量的特性，以及它们与 <code>var</code> 的区别。</li><li><strong>解构赋值</strong>: 讲解了解构赋值语法，可以方便地从数组和对象中提取数据并赋值给变量。</li><li><strong>箭头函数</strong>: 引入了箭头函数语法，简化了函数的定义方式，并改变了函数内部 <code>this</code> 的指向。</li><li><strong>模板字符串</strong>: 介绍了模板字符串，可以方便地拼接字符串和嵌入变量。</li><li><strong>扩展运算符和剩余参数</strong>: 讲解了扩展运算符 <code>...</code> 和剩余参数的使用，可以方便地操作数组和函数参数。</li><li><strong>Promise</strong>: 详细介绍了 Promise 对象，用于处理异步操作，解决了回调地狱的问题。</li><li><strong>Generator 函数</strong>: 探讨了 Generator 函数的概念和用法，以及如何通过迭代器控制函数的执行流程。</li><li><strong>模块化</strong>: 介绍了 ES6 模块化的语法，包括 <code>export</code> 和 <code>import</code>，帮助管理和组织代码。</li><li><strong>Class</strong>: 讲解了 ES6 中引入的类（class）语法糖，更加直观地实现面向对象编程。</li><li><strong>其他新增特性</strong>: 还包括对数组方法、对象属性简写、Symbol、Set 和 Map 等新特性的介绍。</li></ol><p>感谢阮一峰老师的著作，下面开始拜读，并且每一个模块都附上总结。</p><h2 id="ecmascript6简介" tabindex="-1">ECMAScript6简介 <a class="header-anchor" href="#ecmascript6简介" aria-label="Permalink to &quot;ECMAScript6简介&quot;">​</a></h2><h3 id="由来" tabindex="-1">由来 <a class="header-anchor" href="#由来" aria-label="Permalink to &quot;由来&quot;">​</a></h3><p>第一章第一节讲述了 ES6 这个名称的由来，首先需要理清 ECMAScript 和 Javascript 的关系。在最开始 Javascript 不叫 Javascript，而是叫 ECMAScript。因此，<strong>ECMAScript 是 Javascript 的规格，Javascript 是 ECMAScript 的一种实现</strong>。</p><h3 id="含义" tabindex="-1">含义 <a class="header-anchor" href="#含义" aria-label="Permalink to &quot;含义&quot;">​</a></h3><p>2011年， ECMAScript 5.1 版本发布后，6.0 版本开始制定，这个版本改动较大，制定者希望能够6.1、6.2、6.3持续推进，最终决定每年6月更新发布一次标准版本。2016年6月，发布了 ECMAScript 6.0 版本。</p><blockquote><p>因此，ES6 既是一个历史名词，也是一个泛指，含义是 5.1 版本以后的 JavaScript 的下一代 标准，涵盖了 ES2015、 ES2016、 ES2017 等，而 ES2015 则是正式名称，特指当年发布的正式 版本的语言标准 。</p></blockquote><h3 id="提案批准流程" tabindex="-1">提案批准流程 <a class="header-anchor" href="#提案批准流程" aria-label="Permalink to &quot;提案批准流程&quot;">​</a></h3><ul><li>Stage 0: Strawman (展示阶段)</li><li>Stage I : Proposal (征求意见阶段)</li><li>Stage 2: Draft (草案阶段)</li><li>Stage 3: Candidate (候选阶段)</li><li>Stage 4: Finished (定案阶段)</li></ul><h3 id="历史" tabindex="-1">历史 <a class="header-anchor" href="#历史" aria-label="Permalink to &quot;历史&quot;">​</a></h3><p>ES6从开始制定到最后发布用了整整15年。1997年发布的ES1.0是第一个版本，随后连续发布了ES2.0和ES3.0。ES3.0成为通行标准，奠定了JavaScript语言的基本语法。在2000年，ES4.0开始酝酿，但最后没有通过。ES6制定的起点其实可以追溯到2000年。ES4.0没有通过是因为该版本对ES3.0做了彻底升级，导致标准委员会的一些成员不愿意接受。2008年，ECMA决定中止ES4.0的开发，并将其中涉及现有功能改善的部分发布为ES3.1，其他激进设想放入以后的版本。2009年，ES5.0发布，而ES Harmony继续发展成为ES6。2015年，ES6正式通过成为国际标准。整个过程历时15年。</p><h3 id="babel" tabindex="-1">Babel <a class="header-anchor" href="#babel" aria-label="Permalink to &quot;Babel&quot;">​</a></h3><p><code>babel.js</code> 是 ES6 转码器，在浏览器不支持 ES6 语法时转码为 ES5 ，这样就能执行了，下面是一个简单的例子：</p><ul><li><p>转码前：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item.id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p>转码后：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item.id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div></li></ul><p>其中阮一峰老师从以下几个方面介绍讲解起了 <code>babel</code> ：</p><ul><li><p>配置文件 <code>.babelrc</code></p><p>这是放置在项目根目录中，用于设置转码规则和插件，其基本格式为：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;presets&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;plugins&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: []</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>presets</code> 用于设定转码规则，通过 <code>npm</code> 下载依赖，下载后在 <code>presets</code> 数组中添加对应的规则。例子如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;presets&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;latest&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;react&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;stage-2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;plugins&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: []</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>注意</p><p>要想使用以下所有 Babel 工具和模块，都必须先写好 .babelrc。</p></blockquote></li><li><p>命令行转码 <code>babel-cli</code></p><p>Babel 提供 <code>babel-cli</code> 工具，用于命令行转码 。使用方式如下：</p><ol><li><p>下载依赖</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> babel-cli</span></span></code></pre></div></li><li><p>改写 <code>package.json</code> 文件</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;devDependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;babel-cli&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^6.0.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;babel src -d lib&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>打包转码</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div></li></ol></li><li><p>babel-node</p><p>这是 <code>babel-cli</code> 自带的命令，用于提供支持 ES6 的 REPL 环境，直接运行 ES6 代码。</p></li><li><p>babel-register</p><p>修改 <code>require</code> 命令，后续使用 <code>require</code> 加载 <code>.js</code> 、<code>jsx</code> 、<code>.es</code> 和 <code>.es6</code> 文件时，会优先使用 <code>babel</code> 转码。</p><blockquote><p>注意!</p><p><code>babel-register</code> 只会对 <code>require</code> 命令加载的文件进行转码，而不会对当前文件进行转码 。 另外，由于它是实时转码，所以只适合在开发环境中使用 。</p></blockquote></li><li><p>babel-core</p><p>对需要的某模块代码转码。</p><p>下载依赖：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> babel-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> core</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save</span></span></code></pre></div><p>使用示例：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> es6Code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;let x = n =&gt; n + 1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> esSCode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;babel-core&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (es6Code, { presets: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39; latest&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]}).code;</span></span></code></pre></div></li><li><p>babel-polyfill</p><p>Babel 默认只转换新的 JavaScript 句法( syntax)，而不转换新的 API，如 Iterator、 Generator、 Set、 Maps 、 Proxy、 Reflect、 Symbol、 Promise 等全局对象，以及一些 定义在全局对象上的方法(如 Object . assign)都不会转码。</p><p>想让上述的方法运行，必须使用 babel-polyfill 为当前环境提供一个垫片。</p></li></ul><h3 id="traceur" tabindex="-1">Traceur <a class="header-anchor" href="#traceur" aria-label="Permalink to &quot;Traceur&quot;">​</a></h3><p><code>Traceur</code> 是Google 公司的转码器 也可 以将 ES6 代码转为 ES5 代码。具体使用此处不做过多描述。</p><h2 id="let-和-const-命令" tabindex="-1">Let 和 const 命令 <a class="header-anchor" href="#let-和-const-命令" aria-label="Permalink to &quot;Let 和 const 命令&quot;">​</a></h2><h3 id="let-命令" tabindex="-1">let 命令 <a class="header-anchor" href="#let-命令" aria-label="Permalink to &quot;let 命令&quot;">​</a></h3><h3 id="const-命令" tabindex="-1">const 命令 <a class="header-anchor" href="#const-命令" aria-label="Permalink to &quot;const 命令&quot;">​</a></h3>`,24),n=[l];function p(h,k,r,o,d,c){return a(),i("div",null,n)}const u=s(t,[["render",p]]);export{g as __pageData,u as default};
