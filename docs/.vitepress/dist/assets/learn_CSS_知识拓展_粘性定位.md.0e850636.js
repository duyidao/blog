import{_ as s,o as a,c as p,Q as n}from"./chunks/framework.2ee92742.js";const f=JSON.parse('{"title":"粘性定位","description":"","frontmatter":{},"headers":[],"relativePath":"learn/CSS/知识拓展/粘性定位.md","filePath":"learn/CSS/知识拓展/粘性定位.md","lastUpdated":null}'),l={name:"learn/CSS/知识拓展/粘性定位.md"},e=n(`<h1 id="粘性定位" tabindex="-1">粘性定位 <a class="header-anchor" href="#粘性定位" aria-label="Permalink to &quot;粘性定位&quot;">​</a></h1><p>粘性定位是 CSS 一个好用的属性方法，当为元素设置粘性定位后，该元素即将被滑动出屏幕外时会固定在边缘，使用方法如下：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">dd</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">position</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">sticky</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">top</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">dd</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">position</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">sticky</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">top</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>保存后效果如下所示：</p><p><img src="https://pic.imgdb.cn/item/653a616dc458853aef47690b.gif" alt="sticky"></p><p>那么，粘性定位的深层次逻辑是什么呢？ <code>top: 0</code> 可以不设置么？为什么设置之后就能固定到屏幕顶部了呢？</p><p>想要了解粘性定位的底层概念，需要先了解两个概念：</p><ul><li>包含块</li><li>最近可滚动元素</li></ul><p>包含块是 CSS 最重要的知识之一，它的概念很大，这里不做过多赘述，后面考虑开新坑。最近可滚动元素是以自身为起点，一直查找可滚动的父元素。</p><p>何为可滚动元素，设置了 <code>overflow: srcoll</code> 等方法都是可滚动元素。因此一直查看父标签是否是可滚动元素，如果都不是，那么最后会找到整个视口。</p><p><img src="https://pic.imgdb.cn/item/653a6bafc458853aef7aff26.gif" alt="示例图"></p><p>设置了粘性定位 <code>top: 0</code> 的元素在没接触到最近可滚动的元素（也就是视口）时是正常滚动的；但是当它接触到视口的顶部时，就会吸附到视口的顶部。</p><p>即使吸附了，其他元素当它还在原来的位置，因此不会影响其他元素的正常排列。</p><p>最后如果该元素触碰到父元素（即包含块）的边缘，继续滚动就不会再吸附，而是被带离视口区域。演示如下图所示：</p><p><img src="https://pic.imgdb.cn/item/653a6effc458853aef8aa069.gif" alt="触碰到父元素"></p><p>实际效果如下所示：</p><p><img src="https://pic.imgdb.cn/item/653a70afc458853aef92010c.gif" alt="实际效果"></p><p>往回滑动则会重新保持吸附的状态。</p><p>最后如果回滑到它原本的位置，则会恢复成原来的样子，跟随视口滑动而滑动。</p><p>最后总结一下，粘性定位的元素实际上参考了很多元素，和做了很多处理，主要参考最近可滑动的元素、包含块以及自身。</p>`,20),o=[e];function t(c,i,r,d,E,y){return a(),p("div",null,o)}const m=s(l,[["render",t]]);export{f as __pageData,m as default};
